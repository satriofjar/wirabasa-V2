import{a as y,q as n}from"./index-CMWG4mbA.js";const t=e=>({url:t.url(e),method:"get"});t.definition={methods:["get","head"],url:"/user"};t.url=e=>t.definition.url+n(e);t.get=e=>({url:t.url(e),method:"get"});t.head=e=>({url:t.url(e),method:"head"});const s=e=>({action:t.url(e),method:"get"});s.get=e=>({action:t.url(e),method:"get"});s.head=e=>({action:t.url({[e?.mergeQuery?"mergeQuery":"query"]:{_method:"HEAD",...e?.query??e?.mergeQuery??{}}}),method:"get"});t.form=s;const u=e=>({url:u.url(e),method:"get"});u.definition={methods:["get","head"],url:"/user/create"};u.url=e=>u.definition.url+n(e);u.get=e=>({url:u.url(e),method:"get"});u.head=e=>({url:u.url(e),method:"head"});const c=e=>({action:u.url(e),method:"get"});c.get=e=>({action:u.url(e),method:"get"});c.head=e=>({action:u.url({[e?.mergeQuery?"mergeQuery":"query"]:{_method:"HEAD",...e?.query??e?.mergeQuery??{}}}),method:"get"});u.form=c;const l=e=>({url:l.url(e),method:"post"});l.definition={methods:["post"],url:"/user"};l.url=e=>l.definition.url+n(e);l.post=e=>({url:l.url(e),method:"post"});const p=e=>({action:l.url(e),method:"post"});p.post=e=>({action:l.url(e),method:"post"});l.form=p;const o=(e,r)=>({url:o.url(e,r),method:"get"});o.definition={methods:["get","head"],url:"/user/{user}"};o.url=(e,r)=>{(typeof e=="string"||typeof e=="number")&&(e={user:e}),Array.isArray(e)&&(e={user:e[0]}),e=y(e);const h={user:e.user};return o.definition.url.replace("{user}",h.user.toString()).replace(/\/+$/,"")+n(r)};o.get=(e,r)=>({url:o.url(e,r),method:"get"});o.head=(e,r)=>({url:o.url(e,r),method:"head"});const a=(e,r)=>({action:o.url(e,r),method:"get"});a.get=(e,r)=>({action:o.url(e,r),method:"get"});a.head=(e,r)=>({action:o.url(e,{[r?.mergeQuery?"mergeQuery":"query"]:{_method:"HEAD",...r?.query??r?.mergeQuery??{}}}),method:"get"});o.form=a;const d=(e,r)=>({url:d.url(e,r),method:"get"});d.definition={methods:["get","head"],url:"/user/{user}/edit"};d.url=(e,r)=>{(typeof e=="string"||typeof e=="number")&&(e={user:e}),Array.isArray(e)&&(e={user:e[0]}),e=y(e);const h={user:e.user};return d.definition.url.replace("{user}",h.user.toString()).replace(/\/+$/,"")+n(r)};d.get=(e,r)=>({url:d.url(e,r),method:"get"});d.head=(e,r)=>({url:d.url(e,r),method:"head"});const g=(e,r)=>({action:d.url(e,r),method:"get"});g.get=(e,r)=>({action:d.url(e,r),method:"get"});g.head=(e,r)=>({action:d.url(e,{[r?.mergeQuery?"mergeQuery":"query"]:{_method:"HEAD",...r?.query??r?.mergeQuery??{}}}),method:"get"});d.form=g;const m=(e,r)=>({url:m.url(e,r),method:"put"});m.definition={methods:["put","patch"],url:"/user/{user}"};m.url=(e,r)=>{(typeof e=="string"||typeof e=="number")&&(e={user:e}),Array.isArray(e)&&(e={user:e[0]}),e=y(e);const h={user:e.user};return m.definition.url.replace("{user}",h.user.toString()).replace(/\/+$/,"")+n(r)};m.put=(e,r)=>({url:m.url(e,r),method:"put"});m.patch=(e,r)=>({url:m.url(e,r),method:"patch"});const f=(e,r)=>({action:m.url(e,{[r?.mergeQuery?"mergeQuery":"query"]:{_method:"PUT",...r?.query??r?.mergeQuery??{}}}),method:"post"});f.put=(e,r)=>({action:m.url(e,{[r?.mergeQuery?"mergeQuery":"query"]:{_method:"PUT",...r?.query??r?.mergeQuery??{}}}),method:"post"});f.patch=(e,r)=>({action:m.url(e,{[r?.mergeQuery?"mergeQuery":"query"]:{_method:"PATCH",...r?.query??r?.mergeQuery??{}}}),method:"post"});m.form=f;const i=(e,r)=>({url:i.url(e,r),method:"delete"});i.definition={methods:["delete"],url:"/user/{user}"};i.url=(e,r)=>{(typeof e=="string"||typeof e=="number")&&(e={user:e}),Array.isArray(e)&&(e={user:e[0]}),e=y(e);const h={user:e.user};return i.definition.url.replace("{user}",h.user.toString()).replace(/\/+$/,"")+n(r)};i.delete=(e,r)=>({url:i.url(e,r),method:"delete"});const Q=(e,r)=>({action:i.url(e,{[r?.mergeQuery?"mergeQuery":"query"]:{_method:"DELETE",...r?.query??r?.mergeQuery??{}}}),method:"post"});Q.delete=(e,r)=>({action:i.url(e,{[r?.mergeQuery?"mergeQuery":"query"]:{_method:"DELETE",...r?.query??r?.mergeQuery??{}}}),method:"post"});i.form=Q;Object.assign(t,t),Object.assign(u,u),Object.assign(l,l),Object.assign(o,o),Object.assign(d,d),Object.assign(m,m),Object.assign(i,i);export{o as s};
